// ===========================
// Prisma Client & Datasource
// ===========================
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// ===========================
// Enums
// ===========================
enum Role {
  user
  admin
}

enum SubStatus {
  incomplete
  incomplete_expired
  trialing
  active
  past_due
  canceled
  unpaid
  paused
}

enum BillingInterval {
  day
  week
  month
  year
}

// ===========================
// NextAuth (compatível c/ PrismaAdapter)
// ===========================
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ===========================
// Usuários e perfis
// ===========================
model User {
  id        String  @id @default(cuid())
  email     String  @unique
  password  String?
  name      String?
  firstName String?
  lastName  String?
  image     String?

  // dados médicos/opcionais
  medicalLicenseId String?
  doctorProfile    DoctorProfile?

  // estado da conta
  isVerified Boolean @default(false)
  role       Role    @default(user)
  blocked    Boolean @default(false)

  // Stripe
  stripeCustomerId String? @unique

  // metadados
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relações
  accounts      Account[]
  sessions      Session[]
  queries       Query[]
  generatedDocs GeneratedDoc[]
  encounters    Encounter[]
  subscriptions Subscription[]

  @@index([email])
}

/**
 * Perfil médico 1:1 com User
 */
model DoctorProfile {
  id               String    @id @default(cuid())
  userId           String    @unique
  title            String?
  cpf              String?   @unique @db.Char(11)
  crm              String?   @db.VarChar(16)
  crmUF            String?   @db.Char(2)
  specialty        String?
  city             String?
  stateUF          String?   @db.Char(2)
  isVerified       Boolean   @default(false)
  verifiedAt       DateTime?
  verificationNote String?
  phone            String?   @db.VarChar(20)
  whatsapp         String?   @db.VarChar(20)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([crm, crmUF])
  @@index([cpf])
  @@index([crm, crmUF])
}

// ===========================
// Conteúdo gerado e consultas
// ===========================
model GeneratedDoc {
  id        String   @id @default(cuid())
  userId    String
  kind      String
  inputRef  String?
  content   String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

model Query {
  id               String   @id @default(cuid())
  userId           String?
  question         String
  answer           String?
  sourceReferences Json?
  queryType        String   @default("general")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId, createdAt])
  @@map("MedicalQuery")
}

// ===========================
// Encounter / Recording / Prescription
// ===========================
model Encounter {
  id            String  @id @default(cuid())
  userId        String
  mode          String
  specialty     String?
  title         String?
  transcriptUrl String?
  transcriptTxt String? @db.Text
  report        Json?
  patientMeta   Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  prescriptions Prescription[]
  recordings    Recording[]

  @@index([userId, createdAt])
}

model Recording {
  id          String    @id @default(cuid())
  encounterId String
  startedAt   DateTime
  endedAt     DateTime?
  mime        String
  bytes       Int
  url         String

  encounter Encounter @relation(fields: [encounterId], references: [id], onDelete: Cascade)

  @@index([encounterId, startedAt])
}

model Prescription {
  id          String  @id @default(cuid())
  encounterId String
  goal        String?
  patientMeta Json?
  items       Json
  pdfUrl      String?
  sharedTo    Json?

  createdAt DateTime @default(now())

  encounter Encounter @relation(fields: [encounterId], references: [id], onDelete: Cascade)

  @@index([encounterId, createdAt])
}

// ===========================
// Captação de parceiros (B2B)
// ===========================
model PartnerApplication {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  phone     String?
  crm       String?
  company   String?
  message   String?
  status    String   @default("pending")
  createdAt DateTime @default(now())

  @@index([email])
  @@index([createdAt])
  @@index([status, createdAt])
}

// ===========================
// Stripe (assinaturas)
// ===========================
model Subscription {
  id                 String           @id
  userId             String
  customerId         String
  productId          String?
  priceId            String?
  priceAmount        Int?
  currency           String?          @db.VarChar(8)
  interval           BillingInterval?
  status             SubStatus
  cancelAtPeriodEnd  Boolean          @default(false)
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  canceledAt         DateTime?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status])
  @@index([customerId])
  @@index([priceId])
}

model StripeEvent {
  id        String   @id @default(cuid())
  eventId   String   @unique
  type      String
  data      Json
  createdAt DateTime @default(now())
}
