generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// * ******************
/// * App + NextAuth   *
/// * ******************
model User {
  id               String         @id @default(cuid())
  email            String         @unique
  password         String?
  firstName        String?
  lastName         String?
  medicalLicenseId String?        // mantido para compatibilidade
  isVerified       Boolean        @default(false)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  emailVerified    DateTime?
  image            String?
  name             String?
  accounts         Account[]
  generatedDocs    GeneratedDoc[]
  queries          MedicalQuery[]
  sessions         Session[]
  subscriptions    Subscription[]

  // NOVO: relação 1:1 com perfil médico
  doctorProfile    DoctorProfile?

  @@index([email])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/// * ******************
/// * Modelos do App   *
/// * ******************
model MedicalQuery {
  id               String   @id @default(cuid())
  userId           String?
  question         String   @db.Text
  answer           String   @db.Text
  sourceReferences Json?
  queryType        String   @default("evidence")
  createdAt        DateTime @default(now())
  user             User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

model Subscription {
  id               String    @id @default(cuid())
  userId           String
  provider         String
  planCode         String
  status           String
  currentPeriodEnd DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status])
}

model GeneratedDoc {
  id        String   @id @default(cuid())
  userId    String
  kind      String
  inputRef  String?
  content   String   @db.Text
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

/* ─────────────────────────────────────────────────────────
   NOVO MODELO: Perfil médico 1:1 com User
   ───────────────────────────────────────────────────────── */
model DoctorProfile {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // básicos do fluxo
  title     String?  // "Dr." | "Dra." (opcional)
  cpf       String?  @unique
  birthDate DateTime?

  // licença
  crm       String?   // número
  crmUF     String?   // UF (SP, RJ...)
  // especialidade (livre; use specials.json no front)
  specialty String?

  // localização (opcional)
  city      String?
  stateUF   String?

  // verificação
  isVerified       Boolean   @default(false)
  verifiedAt       DateTime?
  verificationNote String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([crm, crmUF])
  @@index([cpf])
}